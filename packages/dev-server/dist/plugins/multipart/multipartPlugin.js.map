{"version":3,"file":"multipartPlugin.js","names":["PassThrough","fastifyPlugin","CRLF","BOUNDARY","multipartPlugin","instance","asMultipart","request","headers","accept","undefined","stream","code","header","send","serializeHeaders","Object","keys","map","key","join","writeChunk","data","isLast","chunk","write","setHeader","name","value","end","decorateReply"],"sources":["../../../src/plugins/multipart/multipartPlugin.ts"],"sourcesContent":["import type { IncomingHttpHeaders } from 'http';\nimport { PassThrough } from 'stream';\nimport type { FastifyInstance, FastifyReply } from 'fastify';\nimport fastifyPlugin from 'fastify-plugin';\nimport type { MultipartHandler } from './types';\n\n/**\n * Implementation is based on:\n * https://github.com/facebook/metro/blob/347b1d7ed87995d7951aaa9fd597c04b06013dac/packages/metro/src/Server/MultipartResponse.js\n */\n\nconst CRLF = '\\r\\n';\nconst BOUNDARY = '3beqjf3apnqeu3h5jqorms4i';\n\nasync function multipartPlugin(instance: FastifyInstance) {\n  function asMultipart(this: FastifyReply): MultipartHandler | undefined {\n    // We should check if is included in accept or if accept has multipart/* or */*,\n    // but React Native will set accept to exactly `multipart/mixed`, so a simple check\n    // will suffice.\n    if (this.request.headers.accept !== 'multipart/mixed') {\n      return undefined;\n    }\n\n    const headers: IncomingHttpHeaders = {};\n    const stream = new PassThrough();\n\n    this.code(200)\n      .header('Content-Type', `multipart/mixed; boundary=\"${BOUNDARY}\"`)\n      .send(stream);\n\n    function serializeHeaders(headers: IncomingHttpHeaders) {\n      return Object.keys(headers)\n        .map((key) => `${key}: ${headers[key]}`)\n        .join(CRLF);\n    }\n\n    function writeChunk<T>(\n      headers: IncomingHttpHeaders,\n      data: T,\n      isLast?: boolean\n    ) {\n      let chunk = `${CRLF}--${BOUNDARY}${CRLF}`;\n      if (headers) {\n        chunk += serializeHeaders(headers) + CRLF + CRLF;\n      }\n\n      if (data) {\n        chunk += data;\n      }\n\n      if (isLast) {\n        chunk += `${CRLF}--${BOUNDARY}--${CRLF}`;\n      }\n\n      stream.write(chunk);\n    }\n\n    function setHeader(name: string, value: string | string[] | undefined) {\n      headers[name] = value;\n    }\n\n    function end<T>(data: T) {\n      writeChunk(headers, data, true);\n      stream.end();\n    }\n\n    return {\n      writeChunk,\n      setHeader,\n      end,\n    };\n  }\n\n  instance.decorateReply('asMultipart', asMultipart);\n}\n\nexport default fastifyPlugin(multipartPlugin, {\n  name: 'multipart-plugin',\n});\n"],"mappings":"AACA,SAASA,WAAW,QAAQ,QAAQ;AAEpC,OAAOC,aAAa,MAAM,gBAAgB;AAG1C;AACA;AACA;AACA;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACnB,MAAMC,QAAQ,GAAG,0BAA0B;AAE3C,eAAeC,eAAeA,CAACC,QAAyB,EAAE;EACxD,SAASC,WAAWA,CAAA,EAAmD;IACrE;IACA;IACA;IACA,IAAI,IAAI,CAACC,OAAO,CAACC,OAAO,CAACC,MAAM,KAAK,iBAAiB,EAAE;MACrD,OAAOC,SAAS;IAClB;IAEA,MAAMF,OAA4B,GAAG,CAAC,CAAC;IACvC,MAAMG,MAAM,GAAG,IAAIX,WAAW,CAAC,CAAC;IAEhC,IAAI,CAACY,IAAI,CAAC,GAAG,CAAC,CACXC,MAAM,CAAC,cAAc,EAAE,8BAA8BV,QAAQ,GAAG,CAAC,CACjEW,IAAI,CAACH,MAAM,CAAC;IAEf,SAASI,gBAAgBA,CAACP,OAA4B,EAAE;MACtD,OAAOQ,MAAM,CAACC,IAAI,CAACT,OAAO,CAAC,CACxBU,GAAG,CAAEC,GAAG,IAAK,GAAGA,GAAG,KAAKX,OAAO,CAACW,GAAG,CAAC,EAAE,CAAC,CACvCC,IAAI,CAAClB,IAAI,CAAC;IACf;IAEA,SAASmB,UAAUA,CACjBb,OAA4B,EAC5Bc,IAAO,EACPC,MAAgB,EAChB;MACA,IAAIC,KAAK,GAAG,GAAGtB,IAAI,KAAKC,QAAQ,GAAGD,IAAI,EAAE;MACzC,IAAIM,OAAO,EAAE;QACXgB,KAAK,IAAIT,gBAAgB,CAACP,OAAO,CAAC,GAAGN,IAAI,GAAGA,IAAI;MAClD;MAEA,IAAIoB,IAAI,EAAE;QACRE,KAAK,IAAIF,IAAI;MACf;MAEA,IAAIC,MAAM,EAAE;QACVC,KAAK,IAAI,GAAGtB,IAAI,KAAKC,QAAQ,KAAKD,IAAI,EAAE;MAC1C;MAEAS,MAAM,CAACc,KAAK,CAACD,KAAK,CAAC;IACrB;IAEA,SAASE,SAASA,CAACC,IAAY,EAAEC,KAAoC,EAAE;MACrEpB,OAAO,CAACmB,IAAI,CAAC,GAAGC,KAAK;IACvB;IAEA,SAASC,GAAGA,CAAIP,IAAO,EAAE;MACvBD,UAAU,CAACb,OAAO,EAAEc,IAAI,EAAE,IAAI,CAAC;MAC/BX,MAAM,CAACkB,GAAG,CAAC,CAAC;IACd;IAEA,OAAO;MACLR,UAAU;MACVK,SAAS;MACTG;IACF,CAAC;EACH;EAEAxB,QAAQ,CAACyB,aAAa,CAAC,aAAa,EAAExB,WAAW,CAAC;AACpD;AAEA,eAAeL,aAAa,CAACG,eAAe,EAAE;EAC5CuB,IAAI,EAAE;AACR,CAAC,CAAC","ignoreList":[]}
{"version":3,"file":"WebSocketServer.js","names":["WebSocketServer","WebSocketServerImpl","constructor","fastify","path","wssOptions","server","noServer","on","onConnection","bind","paths","Array","isArray","shouldUpgrade","pathname","includes","upgrade","request","socket","head","handleUpgrade","webSocket","emit"],"sources":["../../../src/plugins/wss/WebSocketServer.ts"],"sourcesContent":["import type { IncomingMessage } from 'http';\nimport type { Socket } from 'net';\nimport type { FastifyInstance } from 'fastify';\nimport {\n  ServerOptions,\n  WebSocket,\n  WebSocketServer as WebSocketServerImpl,\n} from 'ws';\nimport { WebSocketServerInterface } from './types';\n\n/**\n * Abstract class for providing common logic (eg routing) for all WebSocket servers.\n *\n * @category Development server\n */\nexport abstract class WebSocketServer implements WebSocketServerInterface {\n  /** An instance of the underlying WebSocket server. */\n  protected server: WebSocketServerImpl;\n\n  /** Fastify instance from which {@link server} will receive upgrade connections. */\n  protected fastify: FastifyInstance;\n\n  protected paths: string[];\n\n  /**\n   * Create a new instance of the WebSocketServer.\n   * Any logging information, will be passed through standard `fastify.log` API.\n   *\n   * @param fastify Fastify instance to which the WebSocket will be attached to.\n   * @param path Path on which this WebSocketServer will be accepting connections.\n   * @param wssOptions WebSocket Server options.\n   */\n  constructor(\n    fastify: FastifyInstance,\n    path: string | string[],\n    wssOptions: Omit<\n      ServerOptions,\n      'noServer' | 'server' | 'host' | 'port' | 'path'\n    > = {}\n  ) {\n    this.fastify = fastify;\n    this.server = new WebSocketServerImpl({ noServer: true, ...wssOptions });\n    this.server.on('connection', this.onConnection.bind(this));\n    this.paths = Array.isArray(path) ? path : [path];\n  }\n\n  shouldUpgrade(pathname: string) {\n    return this.paths.includes(pathname);\n  }\n\n  upgrade(request: IncomingMessage, socket: Socket, head: Buffer) {\n    this.server.handleUpgrade(request, socket, head, (webSocket) => {\n      this.server.emit('connection', webSocket, request);\n    });\n  }\n\n  /**\n   * Process incoming WebSocket connection.\n   *\n   * @param socket Incoming WebSocket connection.\n   * @param request Upgrade request for the connection.\n   */\n  abstract onConnection(socket: WebSocket, request: IncomingMessage): void;\n}\n"],"mappings":"AAGA,SAGEA,eAAe,IAAIC,mBAAmB,QACjC,IAAI;AAGX;AACA;AACA;AACA;AACA;AACA,OAAO,MAAeD,eAAe,CAAqC;EACxE;;EAGA;;EAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,WAAWA,CACTC,OAAwB,EACxBC,IAAuB,EACvBC,UAGC,GAAG,CAAC,CAAC,EACN;IACA,IAAI,CAACF,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACG,MAAM,GAAG,IAAIL,mBAAmB,CAAC;MAAEM,QAAQ,EAAE,IAAI;MAAE,GAAGF;IAAW,CAAC,CAAC;IACxE,IAAI,CAACC,MAAM,CAACE,EAAE,CAAC,YAAY,EAAE,IAAI,CAACC,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1D,IAAI,CAACC,KAAK,GAAGC,KAAK,CAACC,OAAO,CAACT,IAAI,CAAC,GAAGA,IAAI,GAAG,CAACA,IAAI,CAAC;EAClD;EAEAU,aAAaA,CAACC,QAAgB,EAAE;IAC9B,OAAO,IAAI,CAACJ,KAAK,CAACK,QAAQ,CAACD,QAAQ,CAAC;EACtC;EAEAE,OAAOA,CAACC,OAAwB,EAAEC,MAAc,EAAEC,IAAY,EAAE;IAC9D,IAAI,CAACd,MAAM,CAACe,aAAa,CAACH,OAAO,EAAEC,MAAM,EAAEC,IAAI,EAAGE,SAAS,IAAK;MAC9D,IAAI,CAAChB,MAAM,CAACiB,IAAI,CAAC,YAAY,EAAED,SAAS,EAAEJ,OAAO,CAAC;IACpD,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;AAEA","ignoreList":[]}
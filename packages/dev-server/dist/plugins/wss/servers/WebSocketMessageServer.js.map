{"version":3,"file":"WebSocketMessageServer.js","names":["URL","WebSocketServer","WebSocketMessageServer","PROTOCOL_VERSION","isBroadcast","message","method","id","undefined","target","isRequest","isResponse","requestId","clientId","result","error","clients","Map","nextClientId","constructor","fastify","parseMessage","data","binary","log","msg","JSON","parse","version","toString","e","getClientSocket","socket","get","Error","handleError","errorMessage","params","send","stringify","forwardRequest","forwardResponse","processServerRequest","output","forEach","peerSocket","peerId","searchParams","upgradeReq","url","entries","reduce","acc","key","value","sendBroadcast","broadcasterId","forwarded","size","warn","broadcast","onConnection","request","client","set","debug","onClose","removeAllListeners","delete","addEventListener","event"],"sources":["../../../../src/plugins/wss/servers/WebSocketMessageServer.ts"],"sourcesContent":["import type { IncomingMessage } from 'http';\nimport { URL } from 'url';\nimport type { FastifyInstance } from 'fastify';\nimport WebSocket from 'ws';\nimport { WebSocketServer } from '../WebSocketServer';\n\n/**\n * Holds {@link ReactNativeMessage} `id` data.\n */\nexport interface ReactNativeIdObject {\n  requestId: string;\n  clientId: string;\n}\n\n/**\n * Message representation used by {@link WebSocketMessageServer}.\n */\nexport interface ReactNativeMessage {\n  version?: string;\n  id?: ReactNativeIdObject;\n  method?: string;\n  target: string;\n  result?: any;\n  error?: Error;\n  params?: Record<string, any>;\n}\n\ntype WebSocketWithUpgradeReq = WebSocket & { upgradeReq?: IncomingMessage };\n\n/**\n * Class for creating a WebSocket server and sending messages between development server\n * and the React Native applications.\n *\n * Based on: https://github.com/react-native-community/cli/blob/v4.14.0/packages/cli-server-api/src/websocket/messageSocketServer.ts\n *\n * @category Development server\n */\nexport class WebSocketMessageServer extends WebSocketServer {\n  static readonly PROTOCOL_VERSION = 2;\n\n  /**\n   * Check if message is a broadcast request.\n   *\n   * @param message Message to check.\n   * @returns True if message is a broadcast request and should be broadcasted\n   * with {@link sendBroadcast}.\n   */\n  static isBroadcast(message: Partial<ReactNativeMessage>) {\n    return (\n      typeof message.method === 'string' &&\n      message.id === undefined &&\n      message.target === undefined\n    );\n  }\n\n  /**\n   * Check if message is a method request.\n   *\n   * @param message Message to check.\n   * @returns True if message is a request.\n   */\n  static isRequest(message: Partial<ReactNativeMessage>) {\n    return (\n      typeof message.method === 'string' && typeof message.target === 'string'\n    );\n  }\n\n  /**\n   * Check if message is a response with results of performing some request.\n   *\n   * @param message Message to check.\n   * @returns True if message is a response.\n   */\n  static isResponse(message: Partial<ReactNativeMessage>) {\n    return (\n      typeof message.id === 'object' &&\n      typeof message.id.requestId !== 'undefined' &&\n      typeof message.id.clientId === 'string' &&\n      (message.result !== undefined || message.error !== undefined)\n    );\n  }\n\n  private clients = new Map<string, WebSocketWithUpgradeReq>();\n  private nextClientId = 0;\n\n  /**\n   * Create new instance of WebSocketMessageServer and attach it to the given Fastify instance.\n   * Any logging information, will be passed through standard `fastify.log` API.\n   *\n   * @param fastify Fastify instance to attach the WebSocket server to.\n   */\n  constructor(fastify: FastifyInstance) {\n    super(fastify, '/message');\n  }\n\n  /**\n   * Parse stringified message into a {@link ReactNativeMessage}.\n   *\n   * @param data Stringified message.\n   * @param binary Additional binary data if any.\n   * @returns Parsed message or `undefined` if parsing failed.\n   */\n  parseMessage(\n    data: string,\n    binary: any\n  ): Partial<ReactNativeMessage> | undefined {\n    if (binary) {\n      this.fastify.log.error({\n        msg: 'Failed to parse message - expected text message, got binary',\n      });\n      return undefined;\n    }\n    try {\n      const message = JSON.parse(data) as Partial<ReactNativeMessage>;\n      if (\n        message.version === WebSocketMessageServer.PROTOCOL_VERSION.toString()\n      ) {\n        return message;\n      }\n      this.fastify.log.error({\n        msg: 'Received message had wrong protocol version',\n        message,\n      });\n    } catch (e) {\n      this.fastify.log.error({\n        msg: 'Failed to parse the message as JSON',\n        data,\n      });\n    }\n    return undefined;\n  }\n\n  /**\n   * Get client's WebSocket connection for given `clientId`.\n   * Throws if no such client is connected.\n   *\n   * @param clientId Id of the client.\n   * @returns WebSocket connection.\n   */\n  getClientSocket(clientId: string) {\n    const socket = this.clients.get(clientId);\n    if (socket === undefined) {\n      throw new Error(`Could not find client with id \"${clientId}\"`);\n    }\n    return socket;\n  }\n\n  /**\n   * Process error by sending an error message to the client whose message caused the error\n   * to occur.\n   *\n   * @param clientId Id of the client whose message caused an error.\n   * @param message Original message which caused the error.\n   * @param error Concrete instance of an error that occurred.\n   */\n  handleError(\n    clientId: string,\n    message: Partial<ReactNativeMessage>,\n    error: Error\n  ) {\n    const errorMessage = {\n      id: message.id,\n      method: message.method,\n      target: message.target,\n      error: message.error === undefined ? 'undefined' : 'defined',\n      params: message.params === undefined ? 'undefined' : 'defined',\n      result: message.result === undefined ? 'undefined' : 'defined',\n    };\n\n    if (message.id === undefined) {\n      this.fastify.log.error({\n        msg: 'Handling message failed',\n        clientId,\n        error,\n        errorMessage,\n      });\n    } else {\n      try {\n        const socket = this.getClientSocket(clientId);\n        socket.send(\n          JSON.stringify({\n            version: WebSocketMessageServer.PROTOCOL_VERSION,\n            error,\n            id: message.id,\n          })\n        );\n      } catch (error) {\n        this.fastify.log.error('Failed to reply', {\n          clientId,\n          error,\n          errorMessage,\n        });\n      }\n    }\n  }\n\n  /**\n   * Send given request `message` to it's designated client's socket based on `message.target`.\n   * The target client must be connected, otherwise it will throw an error.\n   *\n   * @param clientId Id of the client that requested the forward.\n   * @param message Message to forward.\n   */\n  forwardRequest(clientId: string, message: Partial<ReactNativeMessage>) {\n    if (!message.target) {\n      this.fastify.log.error({\n        msg: 'Failed to forward request - message.target is missing',\n        clientId,\n        message,\n      });\n      return;\n    }\n\n    const socket = this.getClientSocket(message.target);\n    socket.send(\n      JSON.stringify({\n        version: WebSocketMessageServer.PROTOCOL_VERSION,\n        method: message.method,\n        params: message.params,\n        id:\n          message.id === undefined\n            ? undefined\n            : { requestId: message.id, clientId },\n      })\n    );\n  }\n\n  /**\n   * Send given response `message` to it's designated client's socket based\n   * on `message.id.clientId`.\n   * The target client must be connected, otherwise it will throw an error.\n   *\n   * @param message Message to forward.\n   */\n  forwardResponse(message: Partial<ReactNativeMessage>) {\n    if (!message.id) {\n      return;\n    }\n\n    const socket = this.getClientSocket(message.id.clientId);\n    socket.send(\n      JSON.stringify({\n        version: WebSocketMessageServer.PROTOCOL_VERSION,\n        result: message.result,\n        error: message.error,\n        id: message.id.requestId,\n      })\n    );\n  }\n\n  /**\n   * Process request message targeted towards this {@link WebSocketMessageServer}\n   * and send back the results.\n   *\n   * @param clientId Id of the client who send the message.\n   * @param message The message to process by the server.\n   */\n  processServerRequest(clientId: string, message: Partial<ReactNativeMessage>) {\n    let result: string | Record<string, Record<string, string>>;\n\n    switch (message.method) {\n      case 'getid':\n        result = clientId;\n        break;\n      case 'getpeers': {\n        const output: Record<string, Record<string, string>> = {};\n        this.clients.forEach((peerSocket, peerId) => {\n          if (clientId !== peerId) {\n            const { searchParams } = new URL(peerSocket.upgradeReq?.url || '');\n            output[peerId] = [...searchParams.entries()].reduce(\n              (acc, [key, value]) => ({\n                ...acc,\n                [key]: value,\n              }),\n              {}\n            );\n          }\n        });\n        result = output;\n        break;\n      }\n      default:\n        throw new Error(\n          `Cannot process server request - unknown method ${JSON.stringify({\n            clientId,\n            message,\n          })}`\n        );\n    }\n\n    const socket = this.getClientSocket(clientId);\n    socket.send(\n      JSON.stringify({\n        version: WebSocketMessageServer.PROTOCOL_VERSION,\n        result,\n        id: message.id,\n      })\n    );\n  }\n\n  /**\n   * Broadcast given message to all connected clients.\n   *\n   * @param broadcasterId Id of the client who is broadcasting.\n   * @param message Message to broadcast.\n   */\n  sendBroadcast(\n    broadcasterId: string | undefined,\n    message: Partial<ReactNativeMessage>\n  ) {\n    const forwarded = {\n      version: WebSocketMessageServer.PROTOCOL_VERSION,\n      method: message.method,\n      params: message.params,\n    };\n\n    if (this.clients.size === 0) {\n      this.fastify.log.warn({\n        msg:\n          'No apps connected. ' +\n          `Sending \"${message.method}\" to all React Native apps failed. ` +\n          'Make sure your app is running in the simulator or on a phone connected via USB.',\n      });\n    }\n\n    for (const [clientId, socket] of this.clients) {\n      if (clientId !== broadcasterId) {\n        try {\n          socket.send(JSON.stringify(forwarded));\n        } catch (error) {\n          this.fastify.log.error({\n            msg: 'Failed to send broadcast',\n            clientId,\n            error,\n            forwarded,\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * Send method broadcast to all connected clients.\n   *\n   * @param method Method name to broadcast.\n   * @param params Method parameters.\n   */\n  broadcast(method: string, params?: Record<string, any>) {\n    this.sendBroadcast(undefined, { method, params });\n  }\n\n  /**\n   * Process new client's WebSocket connection.\n   *\n   * @param socket Incoming WebSocket connection.\n   * @param request Upgrade request for the connection.\n   */\n  onConnection(socket: WebSocket, request: IncomingMessage) {\n    const clientId = `client#${this.nextClientId++}`;\n    let client: WebSocketWithUpgradeReq = socket;\n    client.upgradeReq = request;\n    this.clients.set(clientId, client);\n    this.fastify.log.debug({ msg: 'Message client connected', clientId });\n\n    const onClose = () => {\n      this.fastify.log.debug({ msg: 'Message client disconnected', clientId });\n      socket.removeAllListeners();\n      this.clients.delete(clientId);\n    };\n\n    socket.addEventListener('error', onClose);\n    socket.addEventListener('close', onClose);\n    socket.addEventListener('message', (event) => {\n      const message = this.parseMessage(\n        event.data.toString(),\n        // @ts-ignore\n        event.binary\n      );\n\n      if (!message) {\n        this.fastify.log.error({\n          msg: 'Received message not matching protocol',\n          clientId,\n          message,\n        });\n        return;\n      }\n\n      try {\n        if (WebSocketMessageServer.isBroadcast(message)) {\n          this.sendBroadcast(clientId, message);\n        } else if (WebSocketMessageServer.isRequest(message)) {\n          if (message.target === 'server') {\n            this.processServerRequest(clientId, message);\n          } else {\n            this.forwardRequest(clientId, message);\n          }\n        } else if (WebSocketMessageServer.isResponse(message)) {\n          this.forwardResponse(message);\n        } else {\n          throw new Error(\n            `Invalid message, did not match the protocol ${JSON.stringify({\n              clientId,\n              message,\n            })}`\n          );\n        }\n      } catch (error) {\n        this.handleError(clientId, message, error as Error);\n      }\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]}
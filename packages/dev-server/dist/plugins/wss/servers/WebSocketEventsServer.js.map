{"version":3,"file":"WebSocketEventsServer.js","names":["prettyFormat","WebSocketServer","WebSocketEventsServer","PROTOCOL_VERSION","clients","Map","nextClientId","constructor","fastify","config","verifyClient","origin","test","parseMessage","data","message","JSON","parse","version","log","error","msg","undefined","serializeMessage","toSerialize","Error","default","escapeString","highlight","maxDepth","min","type","map","item","plugins","ReactElement","stringify","broadcastEvent","event","size","serialized","clientId","socket","entries","send","_skipBroadcast","onConnection","set","debug","onClose","removeAllListeners","delete","addEventListener","toString","webSocketMessageServer","broadcast","command","params"],"sources":["../../../../src/plugins/wss/servers/WebSocketEventsServer.ts"],"sourcesContent":["import WebSocket from 'ws';\nimport * as prettyFormat from 'pretty-format';\nimport type { FastifyInstance } from 'fastify';\nimport { WebSocketServer } from '../WebSocketServer';\nimport { WebSocketMessageServer } from './WebSocketMessageServer';\n\n/**\n * {@link WebSocketEventsServer} configuration options.\n */\nexport interface WebSocketEventsServerConfig {\n  /** Instance of a {@link WebSocketMessageServer} which can be used for broadcasting. */\n  webSocketMessageServer: WebSocketMessageServer;\n}\n\n/**\n * Represents a command that connected clients can send to the {@link WebSocketEventsServer}.\n */\nexport interface Command {\n  version: number;\n  type: 'command';\n  command: string;\n  params?: any;\n}\n\n/**\n * Represents an event message.\n */\nexport interface EventMessage {\n  error?: Error | string;\n  type?: string;\n  data?: any;\n}\n\n/**\n * Class for creating a WebSocket server to process events and reports.\n *\n * Based on: https://github.com/react-native-community/cli/blob/v4.14.0/packages/cli-server-api/src/websocket/eventsSocketServer.ts\n *\n * @category Development server\n */\nexport class WebSocketEventsServer extends WebSocketServer {\n  static readonly PROTOCOL_VERSION = 2;\n\n  private clients = new Map<string, WebSocket>();\n  private nextClientId = 0;\n\n  /**\n   * Create new instance of WebSocketHMRServer and attach it to the given Fastify instance.\n   * Any logging information, will be passed through standard `fastify.log` API.\n   *\n   * @param fastify Fastify instance to attach the WebSocket server to.\n   * @param config Configuration object.\n   */\n  constructor(\n    fastify: FastifyInstance,\n    private config: WebSocketEventsServerConfig\n  ) {\n    super(fastify, '/events', {\n      verifyClient: (({ origin }) => {\n        return /^(https?:\\/\\/localhost|file:\\/\\/)/.test(origin);\n      }) as WebSocket.VerifyClientCallbackSync,\n    });\n  }\n\n  /**\n   * Parse received command message from connected client.\n   *\n   * @param data Stringified command message to parse.\n   * @returns Parsed command or `undefined` if parsing failed.\n   */\n  parseMessage(data: string): Command | undefined {\n    try {\n      const message = JSON.parse(data);\n      if (message.version === WebSocketEventsServer.PROTOCOL_VERSION) {\n        return message;\n      }\n      this.fastify.log.error({\n        msg: 'Received message had wrong protocol version',\n        message,\n      });\n    } catch {\n      this.fastify.log.error({\n        msg: 'Failed to parse the message as JSON',\n        data,\n      });\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Stringify `message` into a format that can be transported as a `string`.\n   *\n   * @param message Message to serialize.\n   * @returns String representation of a `message` or `undefined` if serialization failed.\n   */\n  serializeMessage(message: EventMessage) {\n    let toSerialize = message;\n    if (message.error && message.error instanceof Error) {\n      toSerialize = {\n        ...message,\n        error: prettyFormat.default(message.error, {\n          escapeString: true,\n          highlight: true,\n          maxDepth: 3,\n          min: true,\n        }),\n      };\n    } else if (message && message.type === 'client_log') {\n      toSerialize = {\n        ...message,\n        data: message.data.map((item: any) =>\n          typeof item === 'string'\n            ? item\n            : prettyFormat.default(item, {\n                escapeString: true,\n                highlight: true,\n                maxDepth: 3,\n                min: true,\n                plugins: [prettyFormat.plugins.ReactElement],\n              })\n        ),\n      };\n    }\n    try {\n      return JSON.stringify(toSerialize);\n    } catch (error) {\n      this.fastify.log.error({ msg: 'Failed to serialize', error });\n      return undefined;\n    }\n  }\n\n  /**\n   * Broadcast event to all connected clients.\n   *\n   * @param event Event message to broadcast.\n   */\n  broadcastEvent(event: EventMessage) {\n    if (!this.clients.size) {\n      return;\n    }\n\n    const serialized = this.serializeMessage(event);\n    if (!serialized) {\n      return;\n    }\n\n    for (const [clientId, socket] of this.clients.entries()) {\n      try {\n        socket.send(serialized);\n      } catch (error) {\n        this.fastify.log.error({\n          msg: 'Failed to send broadcast to client',\n          clientId,\n          error,\n          _skipBroadcast: true,\n        });\n      }\n    }\n  }\n\n  /**\n   * Process new client's WebSocket connection.\n   *\n   * @param socket Incoming WebSocket connection.\n   */\n  onConnection(socket: WebSocket) {\n    const clientId = `client#${this.nextClientId++}`;\n    this.clients.set(clientId, socket);\n    this.fastify.log.debug({ msg: 'Events client connected', clientId });\n\n    const onClose = () => {\n      this.fastify.log.debug({ msg: 'Events client disconnected', clientId });\n      socket.removeAllListeners();\n      this.clients.delete(clientId);\n    };\n\n    socket.addEventListener('error', onClose);\n    socket.addEventListener('close', onClose);\n    socket.addEventListener('message', (event) => {\n      const message = this.parseMessage(event.data.toString());\n\n      if (!message) {\n        return;\n      }\n\n      if (message.type === 'command') {\n        try {\n          this.config.webSocketMessageServer.broadcast(\n            message.command,\n            message.params\n          );\n        } catch (error) {\n          this.fastify.log.error({\n            msg: 'Failed to forward message to clients',\n            error,\n          });\n        }\n      } else {\n        this.fastify.log.error({\n          msg: 'Unknown message type',\n          message,\n        });\n      }\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]}
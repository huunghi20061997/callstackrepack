{"version":3,"file":"WebSocketDebuggerServer.js","names":["WebSocketServer","WebSocketDebuggerServer","constructor","fastify","isDebuggerConnected","Boolean","debuggerSocket","send","socket","message","error","log","warn","msg","onConnection","request","url","indexOf","info","onDebuggerConnection","onClientConnection","close","onClose","undefined","clientSocket","removeAllListeners","addEventListener","data","toString","JSON","stringify","method"],"sources":["../../../../src/plugins/wss/servers/WebSocketDebuggerServer.ts"],"sourcesContent":["import type { IncomingMessage } from 'http';\nimport type { FastifyInstance } from 'fastify';\nimport WebSocket from 'ws';\nimport { WebSocketServer } from '../WebSocketServer';\n\n/**\n * Class for creating a WebSocket server and providing a bridge between\n * debugger UI (Remote JS debugger) and the running React Native application.\n *\n * React Native application (aka client) will send and receive messages from the debugger UI\n * which runs inside a browser.\n *\n * @category Development server\n */\nexport class WebSocketDebuggerServer extends WebSocketServer {\n  /**\n   * A WebSocket connection with the debugger UI.\n   */\n  private debuggerSocket: WebSocket | undefined;\n\n  /**\n   * A WebSocket connection with the client (React Native app).\n   */\n  private clientSocket: WebSocket | undefined;\n\n  /**\n   * Create new instance of WebSocketDebuggerServer and attach it to the given Fastify instance.\n   * Any logging information, will be passed through standard `fastify.log` API.\n   *\n   * @param fastify Fastify instance to attach the WebSocket server to.\n   */\n  constructor(fastify: FastifyInstance) {\n    super(fastify, '/debugger-proxy');\n  }\n\n  /**\n   * Check if debugger UI is connected to the WebSocketDebuggerServer.\n   */\n  isDebuggerConnected() {\n    return Boolean(this.debuggerSocket);\n  }\n\n  /**\n   * Send a message to a given WebSocket connection.\n   *\n   * @param socket WebSocket connection to send the message to.\n   * @param message Message to send.\n   */\n  send(socket: WebSocket | undefined, message: string) {\n    try {\n      socket?.send(message);\n    } catch (error) {\n      this.fastify.log.warn({ msg: 'Failed to send data to socket', error });\n    }\n  }\n\n  /**\n   * Process new WebSocket connection. The upgrade request should contain `role` query param\n   * for determining the type of the connection.\n   *\n   * @param socket Incoming WebSocket connection.\n   * @param request Upgrade request for the connection.\n   */\n  onConnection(socket: WebSocket, request: IncomingMessage) {\n    const { url = '' } = request;\n    if (url.indexOf('role=debugger') >= 0) {\n      this.fastify.log.info({ msg: 'Chrome Remote JS debugger connected' });\n      this.onDebuggerConnection(socket);\n    } else if (url.indexOf('role=client') >= 0) {\n      this.fastify.log.info({ msg: 'React Native app connected to debugger' });\n      this.onClientConnection(socket);\n    } else {\n      socket.close(1011, 'Missing role param');\n    }\n  }\n\n  /**\n   * Process new WebSocket connection from Debugger UI (Remote JS Debugger).\n   * If there's already open connection, the new one gets closed automatically.\n   *\n   * @param socket Incoming debugger WebSocket connection.\n   */\n  onDebuggerConnection(socket: WebSocket) {\n    if (this.debuggerSocket) {\n      socket.close(1011, 'Another debugger is already connected');\n      return;\n    }\n    this.debuggerSocket = socket;\n    const onClose = () => {\n      this.fastify.log.info({ msg: 'Chrome Remote JS debugger disconnected' });\n      this.debuggerSocket = undefined;\n      if (this.clientSocket) {\n        this.clientSocket.removeAllListeners();\n        this.clientSocket.close(1011, 'Debugger was disconnected');\n      }\n    };\n    this.debuggerSocket.addEventListener('error', onClose);\n    this.debuggerSocket.addEventListener('close', onClose);\n    this.debuggerSocket.addEventListener('message', ({ data }) => {\n      this.send(this.clientSocket, data.toString());\n    });\n  }\n\n  /**\n   * Process new WebSocket connection from React Native app (client)\n   * and close any previous connection.\n   *\n   * @param socket Incoming client WebSocket connection.\n   */\n  onClientConnection(socket: WebSocket) {\n    if (this.clientSocket) {\n      this.clientSocket.removeAllListeners();\n      this.clientSocket.close(1011, 'Another client is connected');\n      this.clientSocket = undefined;\n    }\n\n    const onClose = () => {\n      this.fastify.log.info({\n        msg: 'React Native app disconnected from debugger',\n      });\n      this.clientSocket = undefined;\n      this.send(\n        this.debuggerSocket,\n        JSON.stringify({ method: '$disconnected' })\n      );\n    };\n\n    this.clientSocket = socket;\n    this.clientSocket.addEventListener('error', onClose);\n    this.clientSocket.addEventListener('close', onClose);\n    this.clientSocket.addEventListener('message', ({ data }) => {\n      this.send(this.debuggerSocket, data.toString());\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]}
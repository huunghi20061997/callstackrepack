{"version":3,"file":"types.js","names":[],"sources":["../src/types.ts"],"sourcesContent":["import webpack from 'webpack';\n\nexport type Rule = string | RegExp;\n\nexport interface Fallback<T> {\n  fallback: T | (() => T);\n}\n\n/**\n * Represent interface of Webpack logger.\n * See: https://webpack.js.org/api/logging/\n */\nexport type WebpackLogger = ReturnType<\n  webpack.Compiler['getInfrastructureLogger']\n>;\n\n/**\n * Interface that all Webpack plugins should implement.\n */\nexport interface WebpackPlugin {\n  /**\n   * Entry point for a plugin. It should perform any kind of setup or initialization\n   * hook into compiler's events.\n   *\n   * @param compiler Webpack compiler instance.\n   */\n  apply(compiler: webpack.Compiler): void;\n}\n\n/**\n * CLI arguments passed from React Native CLI when running bundle command.\n *\n * @internal\n */\nexport interface BundleArguments {\n  entryFile: string;\n  platform: string;\n  dev: boolean;\n  minify?: boolean;\n  bundleOutput?: string;\n  sourcemapOutput?: string;\n  assetsDest?: string;\n  json?: string;\n  stats?: string;\n  verbose?: boolean;\n  watch?: boolean;\n  webpackConfig?: string;\n}\n\n/**\n * CLI arguments passed from React Native CLI when running start command.\n *\n * @internal\n */\nexport interface StartArguments {\n  port?: number;\n  host: string;\n  https?: boolean;\n  key?: string;\n  cert?: string;\n  interactive?: boolean;\n  experimentalDebugger?: boolean;\n  json?: boolean;\n  logFile?: string;\n  reversePort?: boolean;\n  silent?: boolean;\n  verbose?: boolean;\n  webpackConfig?: string;\n}\n\n/**\n * Holds all information used by {@link parseCliOptions}.\n *\n * @internal\n */\nexport interface CliOptions {\n  config: {\n    root: string;\n    reactNativePath: string;\n    webpackConfigPath: string;\n  };\n  command: 'bundle' | 'start';\n  arguments:\n    | {\n        bundle: BundleArguments;\n      }\n    | {\n        start: StartArguments;\n      };\n}\n\nexport interface WebpackWorkerOptions {\n  cliOptions: CliOptions;\n  platform: string;\n}\n\n/**\n * Development server configuration options.\n */\nexport interface DevServerOptions {\n  /**\n   * Hostname or IP address under which to run the development server.\n   *\n   * See: {@link DEFAULT_HOSTNAME}.\n   */\n  host?: string;\n\n  /**\n   * Port under which to run the development server.\n   *\n   * See: {@link DEFAULT_PORT}.\n   */\n  port: number;\n\n  /**\n   * HTTPS options.\n   * If specified, the server will use HTTPS, otherwise HTTP.\n   */\n  https?: {\n    /** Path to certificate when running server on HTTPS. */\n    cert?: string;\n\n    /** Path to certificate key when running server on HTTPS. */\n    key?: string;\n  };\n\n  /** Whether to enable Hot Module Replacement. */\n  hmr?: boolean;\n}\n\n/**\n * Represents all relevant options that are passed to Webpack config function,\n * needed to create a valid Webpack configuration and configure all plugins.\n *\n * This is the return type of {@link parseCliOptions}.\n */\nexport interface WebpackEnvOptions {\n  /** Compilation mode. */\n  mode?: 'production' | 'development';\n\n  /** Target application platform. */\n  platform?: string;\n\n  /** Context in which all resolution happens. Usually it's project root directory. */\n  context?: string;\n\n  /** Input filename - entry point of the bundle. */\n  entry?: string;\n\n  /** Bundle output filename - name under which generated bundle will be saved. */\n  bundleFilename?: string;\n\n  /**\n   * Source map filename - name under which generated source map (for the main bundle) will be saved.\n   */\n  sourceMapFilename?: string;\n\n  /** Assets output path - directory where generated static assets will be saved. */\n  assetsPath?: string;\n\n  /** Whether to minimize the final bundle. */\n  minimize?: boolean;\n\n  /** Path to React Native dependency. Usually points to `node_modules/react-native`. */\n  reactNativePath?: string;\n\n  /**\n   * Development server configuration options.\n   * Used to configure `@callstack/repack-dev-server`.\n   *\n   * If `undefined`, then development server should not be run.\n   */\n  devServer?: DevServerOptions;\n}\n\n/**\n * Represent Hot Module Replacement Update body.\n *\n * @internal\n */\nexport interface HMRMessageBody {\n  name: string;\n  time: number;\n  hash: string;\n  warnings: webpack.StatsCompilation['warnings'];\n  errors: webpack.StatsCompilation['errors'];\n  modules: Record<string, string>;\n}\n\n/**\n * Represent Hot Module Replacement Update message.\n *\n * @internal\n */\nexport interface HMRMessage {\n  action: 'building' | 'built' | 'sync';\n  body: HMRMessageBody | null;\n}\n"],"mappings":"","ignoreList":[]}
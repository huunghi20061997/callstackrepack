{"version":3,"file":"start.js","names":["_readline","_interopRequireDefault","require","_url","_execa","_env","_logging","_Compiler","_getWebpackConfigPath","e","__esModule","default","start","_","config","args","webpackConfigPath","getWebpackConfigPath","root","webpackConfig","reversePort","reversePortArg","restArgs","cliOptions","reactNativePath","command","arguments","process","argv","includes","isSilent","silent","isVerbose","verbose","reporter","composeReporters","ConsoleReporter","asJson","json","level","logFile","FileReporter","filename","undefined","filter","Boolean","compiler","Compiler","createServer","stop","options","rootDir","host","DEFAULT_HOSTNAME","port","DEFAULT_PORT","https","cert","key","experiments","experimentalDebugger","delegate","ctx","interactive","bindKeypressInput","runAdbReverse","lastStats","on","platform","notifyBuildStart","broadcastToHmrClients","action","stats","notifyBuildEnd","body","createHmrBody","getAsset","sendProgress","data","getMimeType","inferPlatform","uri","url","URL","searchParams","get","exec","pathname","symbolicator","getSource","fileUrl","parseFileUrl","getSourceMap","Error","shouldIncludeFrame","frame","test","file","hmr","getUriPath","onClientConnected","clientId","messages","getHello","getStatus","logger","onMessage","log","logEntry","makeLogEntryFromFastifyLog","issuer","api","getPlatforms","Promise","resolve","Object","keys","workers","getAssets","entries","assetsCache","map","name","asset","size","info","getCompilationStats","statsCache","stdin","setRawMode","warn","msg","readline","emitKeypressEvents","_key","ctrl","exit","emit","broadcastToMessageClients","method","adbPath","env","ANDROID_HOME","execa","error","message","split","trim","pathArray","platformFromPath","slice","join","platformOrName","reverse","replace","modules","module","identifier","time","hash","warnings","errors"],"sources":["../../src/commands/start.ts"],"sourcesContent":["import readline from 'readline';\nimport { URL } from 'url';\nimport webpack from 'webpack';\nimport execa from 'execa';\nimport { Config } from '@react-native-community/cli-types';\nimport type { Server } from '@callstack/repack-dev-server';\nimport { CliOptions, HMRMessageBody, StartArguments } from '../types';\nimport { DEFAULT_HOSTNAME, DEFAULT_PORT } from '../env';\nimport {\n  composeReporters,\n  ConsoleReporter,\n  FileReporter,\n  makeLogEntryFromFastifyLog,\n  Reporter,\n} from '../logging';\nimport { Compiler } from '../webpack/Compiler';\nimport { getWebpackConfigPath } from './utils/getWebpackConfigPath';\n\n/**\n * Start command for React Native CLI.\n * It runs `@callstack/repack-dev-server` to provide Development Server functionality to React Native apps\n * in development mode.\n *\n * @param _ Original, non-parsed arguments that were provided when running this command.\n * @param config React Native CLI configuration object.\n * @param args Parsed command line arguments.\n *\n * @internal\n * @category CLI command\n */\nexport async function start(_: string[], config: Config, args: StartArguments) {\n  const webpackConfigPath = getWebpackConfigPath(\n    config.root,\n    args.webpackConfig\n  );\n  const { reversePort: reversePortArg, ...restArgs } = args;\n  const cliOptions: CliOptions = {\n    config: {\n      root: config.root,\n      reactNativePath: config.reactNativePath,\n      webpackConfigPath,\n    },\n    command: 'start',\n    arguments: { start: { ...restArgs } },\n  };\n\n  const reversePort = reversePortArg ?? process.argv.includes('--reverse-port');\n  const isSilent = args.silent;\n  const isVerbose = isSilent\n    ? false\n    : // TODO fix in a separate PR (jbroma)\n      // eslint-disable-next-line prettier/prettier\n      args.verbose ?? process.argv.includes('--verbose');\n  const reporter = composeReporters(\n    [\n      new ConsoleReporter({\n        asJson: args.json,\n        level: isSilent ? 'silent' : isVerbose ? 'verbose' : 'normal',\n      }),\n      args.logFile ? new FileReporter({ filename: args.logFile }) : undefined,\n    ].filter(Boolean) as Reporter[]\n  );\n  const compiler = new Compiler(cliOptions, reporter, isVerbose);\n\n  const { createServer } = await import('@callstack/repack-dev-server');\n  const { start, stop } = await createServer({\n    options: {\n      rootDir: cliOptions.config.root,\n      host: args.host || DEFAULT_HOSTNAME,\n      port: args.port ?? DEFAULT_PORT,\n      https: args.https\n        ? {\n            cert: args.cert,\n            key: args.key,\n          }\n        : undefined,\n    },\n    experiments: {\n      experimentalDebugger: args.experimentalDebugger,\n    },\n    delegate: (ctx): Server.Delegate => {\n      if (args.interactive) {\n        bindKeypressInput(ctx);\n      }\n\n      if (reversePort && args.port) {\n        void runAdbReverse(ctx, args.port);\n      }\n\n      const lastStats: Record<string, webpack.StatsCompilation> = {};\n\n      compiler.on('watchRun', ({ platform }) => {\n        ctx.notifyBuildStart(platform);\n        if (platform === 'android') {\n          void runAdbReverse(ctx, args.port ?? DEFAULT_PORT);\n        }\n      });\n\n      compiler.on('invalid', ({ platform }) => {\n        ctx.notifyBuildStart(platform);\n        ctx.broadcastToHmrClients({ action: 'building' }, platform);\n      });\n\n      compiler.on(\n        'done',\n        ({\n          platform,\n          stats,\n        }: {\n          platform: string;\n          stats: webpack.StatsCompilation;\n        }) => {\n          ctx.notifyBuildEnd(platform);\n          lastStats[platform] = stats;\n          ctx.broadcastToHmrClients(\n            { action: 'built', body: createHmrBody(stats) },\n            platform\n          );\n        }\n      );\n\n      return {\n        compiler: {\n          getAsset: async (filename, platform, sendProgress) =>\n            (await compiler.getAsset(filename, platform, sendProgress)).data,\n          getMimeType: (filename) => compiler.getMimeType(filename),\n          inferPlatform: (uri) => {\n            const url = new URL(uri, 'protocol://domain');\n            if (!url.searchParams.get('platform')) {\n              const [, platform] = /^\\/(.+)\\/.+$/.exec(url.pathname) ?? [];\n              return platform;\n            }\n\n            return undefined;\n          },\n        },\n        symbolicator: {\n          getSource: (fileUrl) => {\n            const { filename, platform } = parseFileUrl(fileUrl);\n            return compiler.getSource(filename, platform);\n          },\n          getSourceMap: (fileUrl) => {\n            const { filename, platform } = parseFileUrl(fileUrl);\n            if (!platform) {\n              throw new Error('Cannot infer platform for file URL');\n            }\n\n            return compiler.getSourceMap(filename, platform);\n          },\n          shouldIncludeFrame: (frame) => {\n            // If the frame points to internal bootstrap/module system logic, skip the code frame.\n            return !/webpack[/\\\\]runtime[/\\\\].+\\s/.test(frame.file);\n          },\n        },\n        hmr: {\n          getUriPath: () => '/__hmr',\n          onClientConnected: (platform, clientId) => {\n            ctx.broadcastToHmrClients(\n              { action: 'sync', body: createHmrBody(lastStats[platform]) },\n              platform,\n              [clientId]\n            );\n          },\n        },\n        messages: {\n          getHello: () => 'React Native packager is running',\n          getStatus: () => 'packager-status:running',\n        },\n        logger: {\n          onMessage: (log) => {\n            const logEntry = makeLogEntryFromFastifyLog(log);\n            logEntry.issuer = 'DevServer';\n            reporter.process(logEntry);\n          },\n        },\n        api: {\n          getPlatforms: () => Promise.resolve(Object.keys(compiler.workers)),\n          getAssets: (platform) =>\n            Promise.resolve(\n              Object.entries(compiler.assetsCache[platform] ?? {}).map(\n                ([name, asset]) => ({\n                  name,\n                  size: asset.info.size,\n                })\n              )\n            ),\n          getCompilationStats: (platform) =>\n            Promise.resolve(compiler.statsCache[platform] ?? null),\n        },\n      };\n    },\n  });\n\n  await start();\n\n  return {\n    stop: async () => {\n      reporter.stop();\n      await stop();\n    },\n  };\n}\n\nfunction bindKeypressInput(ctx: Server.DelegateContext) {\n  if (!process.stdin.setRawMode) {\n    ctx.log.warn({\n      msg: 'Interactive mode is not supported in this environment',\n    });\n    return;\n  }\n\n  readline.emitKeypressEvents(process.stdin);\n  process.stdin.setRawMode(true);\n\n  process.stdin.on('keypress', (_key, data) => {\n    const { ctrl, name } = data;\n    if (ctrl === true) {\n      switch (name) {\n        case 'c':\n          process.exit();\n          break;\n        case 'z':\n          process.emit('SIGTSTP', 'SIGTSTP');\n          break;\n      }\n    } else if (name === 'r') {\n      ctx.broadcastToMessageClients({ method: 'reload' });\n      ctx.log.info({\n        msg: 'Reloading app',\n      });\n    } else if (name === 'd') {\n      ctx.broadcastToMessageClients({ method: 'devMenu' });\n      ctx.log.info({\n        msg: 'Opening developer menu',\n      });\n    }\n  });\n}\n\nasync function runAdbReverse(ctx: Server.DelegateContext, port: number) {\n  const adbPath = process.env.ANDROID_HOME\n    ? `${process.env.ANDROID_HOME}/platform-tools/adb`\n    : 'adb';\n  const command = `${adbPath} reverse tcp:${port} tcp:${port}`;\n  try {\n    await execa.command(command);\n    ctx.log.info(`Successfully run: ${command}`);\n  } catch (error) {\n    // Get just the error message\n    const message =\n      (error as Error).message.split('error:')[1] || (error as Error).message;\n    ctx.log.warn(`Failed to run: ${command} - ${message.trim()}`);\n  }\n}\n\nfunction parseFileUrl(fileUrl: string) {\n  const { pathname, searchParams } = new URL(fileUrl);\n  let platform = searchParams.get('platform');\n  let filename = pathname;\n\n  if (!platform) {\n    const pathArray = pathname.split('/');\n    const platformFromPath = pathArray[1];\n\n    if (platformFromPath === 'ios' || platformFromPath === 'android') {\n      platform = platformFromPath;\n      filename = pathArray.slice(2).join('/');\n    }\n  }\n\n  if (!platform) {\n    const [, platformOrName, name] = filename.split('.').reverse();\n    if (name !== undefined) {\n      platform = platformOrName;\n    }\n  }\n\n  return {\n    filename: filename.replace(/^\\//, ''),\n    platform: platform || undefined,\n  };\n}\n\nfunction createHmrBody(\n  stats?: webpack.StatsCompilation\n): HMRMessageBody | null {\n  if (!stats) {\n    return null;\n  }\n\n  const modules: Record<string, string> = {};\n  for (const module of stats.modules ?? []) {\n    const { identifier, name } = module;\n    if (identifier !== undefined && name) {\n      modules[identifier] = name;\n    }\n  }\n\n  return {\n    name: stats.name ?? '',\n    time: stats.time ?? 0,\n    hash: stats.hash ?? '',\n    warnings: stats.warnings || [],\n    errors: stats.errors || [],\n    modules,\n  };\n}\n"],"mappings":"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","ignoreList":[]}
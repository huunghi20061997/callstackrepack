{"version":3,"file":"types.js","names":[],"sources":["../../../../src/webpack/plugins/OutputPlugin/types.ts"],"sourcesContent":["import type { Rule } from '../../../types';\n\n/**\n * Matching options to check if given {@link DestinationConfig} should be used.\n */\nexport type DestinationMatchRules = {\n  /**\n   * Rule (string or RegExp) that must match the chunk name (or id if name is not available),\n   * for the whole `DestinationMatchRules` to match.\n   */\n  test?: Rule | Rule[];\n\n  /**\n   * Rule (string or RegExp) that must match the chunk name (or id if name is not available),\n   * for the whole `DestinationMatchRules` to match.\n   */\n  include?: Rule | Rule[];\n\n  /**\n   * Rule (string or RegExp) that __MUST NOT__ match the chunk name (or id if name is not available),\n   * for the whole `DestinationMatchRules` to match.\n   */\n  exclude?: Rule | Rule[];\n};\n\n/**\n * Destination config for local chunks.\n */\nexport type LocalDestinationConfig = {\n  type: 'local';\n};\n\n/**\n * Destination config for remote chunks.\n */\nexport type RemoteDestinationConfig = {\n  type: 'remote';\n\n  /** Output path to a directory, where remote chunks should be saved. */\n  outputPath: string;\n};\n\n/**\n * Destination config for chunks.\n */\nexport type DestinationConfig =\n  | LocalDestinationConfig\n  | RemoteDestinationConfig;\n\n/**\n * Destination specification for chunks.\n */\nexport type DestinationSpec = DestinationMatchRules & DestinationConfig;\n\n/**\n * {@link OutputPlugin} configuration options.\n */\nexport interface OutputPluginConfig {\n  /** Context in which all resolution happens. Usually it's project root directory. */\n  context: string;\n\n  /** Target application platform. */\n  platform: string;\n\n  /**\n   * Whether the plugin is enabled. Defaults to `true`.\n   *\n   * Useful when running with development server, in which case, it's not necessary for this plugin\n   * to be enabled.\n   */\n  enabled?: boolean;\n\n  /** The entry chunk name, `main` by default. */\n  entryName?: string;\n\n  /**\n   * Output options specifying where to save generated bundle, source map and assets.\n   */\n  output: {\n    /** Bundle output filename - name under which generated bundle will be saved. */\n    bundleFilename?: string;\n\n    /**\n     * Source map filename - name under which generated source map (for the main bundle) will be saved.\n     */\n    sourceMapFilename?: string;\n\n    /** Assets output path - directory where generated static assets will be saved. */\n    assetsPath?: string;\n\n    /**\n     * Auxiliary assets output path - directory where generated auxiliary assets will be saved\n     *\n     * Useful when working with remote-assets generated by assetsLoader\n     * */\n    auxiliaryAssetsPath?: string;\n  };\n\n  /**\n   * Options specifying how to deal with extra chunks generated in the compilation,\n   * usually by using dynamic `import(...)` function.\n   *\n   * By default all extra chunks will be saved under `<projectRoot>/build/outputs/<platform>/remotes` directory.\n   *\n   * __Specifying custom value for this option, will disable default setting - you will need\n   * to configure `outputPath` for `type: 'remote'` yourself.__\n   *\n   * If you want to have some of the chunks available inside the `.ipa`/`.apk` file generated by React Native,\n   * you must configure this options to match the chunks you want (using `test`/`include`/`exclude`)\n   * and set the `type` to `local`, for example:\n   * ```ts\n   * new OutputPlugin({\n   *   context,\n   *   platform,\n   *   output,\n   *   extraChunks: [\n   *     {\n   *       // Make `my-chunk` local\n   *       include: /my-chunk/,\n   *       type: 'local',\n   *     },\n   *     {\n   *       // Make any other chunk remote\n   *       exclude: /my-chunk/,\n   *       type: 'remote',\n   *       outputPath,\n   *     },\n   *   ]\n   * });\n   * ```\n   */\n  extraChunks?: DestinationSpec[];\n}\n"],"mappings":"","ignoreList":[]}
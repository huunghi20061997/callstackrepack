{"version":3,"file":"getInitializationEntries.js","names":["_path","_interopRequireDefault","require","e","__esModule","default","getInitializationEntries","reactNativePath","options","initializeCoreLocation","hmr","getPolyfills","path","join","entries","resolve","push"],"sources":["../../../src/webpack/utils/getInitializationEntries.ts"],"sourcesContent":["import path from 'path';\n\n/**\n * {@link getInitializationEntries} options.\n */\nexport interface InitializationEntriesOptions {\n  /**\n   * Absolute location to JS file with initialization logic for React Native.\n   * Useful if you want to built for out-of-tree platforms.\n   */\n  initializeCoreLocation?: string;\n  /**\n   * Whether Hot Module Replacement entry should be enabled. Defaults to `true`.\n   */\n  hmr?: boolean;\n}\n\n/**\n * Get setup and initialization entires for Webpack configuration's `entry` field.\n * The returned entires should be added before your project entry.\n *\n * @param reactNativePath Absolute path to directory with React Native dependency.\n * @param options Additional options that can modify returned entires.\n * @returns Array of entires.\n *\n * @category Webpack util\n *\n * @example Usage in Webpack config:\n * ```ts\n * import * as Repack from '@callstack/repack';\n *\n * const { resolve } = createRequire(import.meta.url);\n *\n * export default (env) => {\n *   const {\n *     devServer,\n *     reactNativePath = resolve('react-native'),\n *   } = env;\n *\n *   return {\n *     entry: [\n *       ...Repack.getInitializationEntries(reactNativePath, {\n *         hmr: devServer && devServer.hmr,\n *       }),\n *       entry,\n *     ],\n *   };\n * };\n * ```\n */\nexport function getInitializationEntries(\n  reactNativePath: string,\n  options: InitializationEntriesOptions = {}\n): string[] {\n  const { initializeCoreLocation, hmr } = options;\n\n  const getPolyfills = require(\n    path.join(reactNativePath, 'rn-get-polyfills.js')\n  );\n\n  const entries = [\n    ...getPolyfills(),\n    initializeCoreLocation ||\n      path.join(reactNativePath, 'Libraries/Core/InitializeCore.js'),\n    require.resolve('../../modules/configurePublicPath'),\n  ];\n\n  if (hmr) {\n    entries.push(require.resolve('../../modules/WebpackHMRClient'));\n  }\n\n  return entries;\n}\n"],"mappings":";;;;;;AAAA,IAAAA,KAAA,GAAAC,sBAAA,CAAAC,OAAA;AAAwB,SAAAD,uBAAAE,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAExB;AACA;AACA;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASG,wBAAwBA,CACtCC,eAAuB,EACvBC,OAAqC,GAAG,CAAC,CAAC,EAChC;EACV,MAAM;IAAEC,sBAAsB;IAAEC;EAAI,CAAC,GAAGF,OAAO;EAE/C,MAAMG,YAAY,GAAGT,OAAO,CAC1BU,aAAI,CAACC,IAAI,CAACN,eAAe,EAAE,qBAAqB,CAClD,CAAC;EAED,MAAMO,OAAO,GAAG,CACd,GAAGH,YAAY,CAAC,CAAC,EACjBF,sBAAsB,IACpBG,aAAI,CAACC,IAAI,CAACN,eAAe,EAAE,kCAAkC,CAAC,EAChEL,OAAO,CAACa,OAAO,CAAC,mCAAmC,CAAC,CACrD;EAED,IAAIL,GAAG,EAAE;IACPI,OAAO,CAACE,IAAI,CAACd,OAAO,CAACa,OAAO,CAAC,gCAAgC,CAAC,CAAC;EACjE;EAEA,OAAOD,OAAO;AAChB","ignoreList":[]}
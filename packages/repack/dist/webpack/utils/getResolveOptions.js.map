{"version":3,"file":"getResolveOptions.js","names":["getResolveOptions","platform","options","preferNativePlatform","enablePackageExports","extensions","conditionNames","exportsFields","flatMap","ext","platformExt","nativeExt","mainFields","aliasFields"],"sources":["../../../src/webpack/utils/getResolveOptions.ts"],"sourcesContent":["/**\n * {@link getResolveOptions} additional options.\n */\nexport interface ResolveOptions {\n  /**\n   * Whether to enable Package Exports support. Defaults to `false`.\n   */\n  enablePackageExports?: boolean;\n  /**\n   * Whether to prefer native platform over generic platform. Defaults to `true`\n   */\n  preferNativePlatform?: boolean;\n}\n\n/**\n * Get Webpack's resolve options to properly resolve JavaScript files:\n * - resolve platform extensions (e.g. `file.ios.js`)\n * - resolve native extensions (e.g. `file.native.js`)\n * - optionally use package exports (`exports` field in `package.json`) instead of\n *   main fields (e.g. `main` or `browser` or `react-native`)\n *\n * @param platform Target application platform.\n * @param options Additional options that can modify resolution behaviour.\n * @returns Webpack's resolve options.\n *\n * @category Webpack util\n *\n * @example Usage in Webpack config:\n *\n * ```ts\n * import * as Repack from '@callstack/repack';\n *\n * export default (env) => {\n *   const { platform } = env;\n *\n *   return {\n *     resolve: {\n *       ...Repack.getResolveOptions(platform, {\n *         enablePackageExports: false,\n *         preferNativePlatform: true\n *       }),\n *     },\n *   };\n * };\n * ```\n */\n\nexport function getResolveOptions(platform: string, options?: ResolveOptions) {\n  const preferNativePlatform = options?.preferNativePlatform ?? true;\n  const enablePackageExports = options?.enablePackageExports ?? false;\n\n  let extensions = ['.js', '.jsx', '.ts', '.tsx', '.json'];\n\n  let conditionNames: string[];\n  let exportsFields: string[];\n\n  if (enablePackageExports) {\n    /**\n     * Match what React Native uses in @react-native/metro-config.\n     * Order of conditionNames doesn't matter.\n     * Order inside of target package.json's `exports` field matters.\n     */\n    conditionNames = ['require', 'import', 'react-native'];\n    exportsFields = ['exports'];\n  } else {\n    conditionNames = [];\n    exportsFields = [];\n    extensions = extensions.flatMap((ext) => {\n      const platformExt = `.${platform}${ext}`;\n      const nativeExt = `.native${ext}`;\n\n      if (preferNativePlatform) {\n        return [platformExt, nativeExt, ext];\n      } else {\n        return [platformExt, ext];\n      }\n    });\n  }\n\n  /**\n   * Match what React Native uses in @react-native/metro-config.\n   * First entry takes precedence.\n   *\n   * Reference: https://github.com/facebook/react-native/blob/main/packages/metro-config/src/index.flow.js\n   */\n  return {\n    /**\n     * Reference: Webpack's [configuration.resolve.mainFields](https://webpack.js.org/configuration/resolve/#resolvemainfields)\n     */\n    mainFields: ['react-native', 'browser', 'main'],\n    /**\n     * Reference: Webpack's [configuration.resolve.aliasFields](https://webpack.js.org/configuration/resolve/#resolvealiasfields)\n     */\n    aliasFields: ['react-native', 'browser', 'main'],\n    /**\n     * Reference: Webpack's [configuration.resolve.conditionNames](https://webpack.js.org/configuration/resolve/#resolveconditionnames)\n     */\n    conditionNames: conditionNames,\n    /**\n     * Reference: Webpack's [configuration.resolve.exportsFields](https://webpack.js.org/configuration/resolve/#resolveexportsfields)\n     */\n    exportsFields: exportsFields,\n    /**\n     * Reference: Webpack's [configuration.resolve.extensions](https://webpack.js.org/configuration/resolve/#resolveextensions)\n     */\n    extensions: extensions,\n  };\n}\n"],"mappings":";;;;;;AAAA;AACA;AACA;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,SAASA,iBAAiBA,CAACC,QAAgB,EAAEC,OAAwB,EAAE;EAC5E,MAAMC,oBAAoB,GAAGD,OAAO,EAAEC,oBAAoB,IAAI,IAAI;EAClE,MAAMC,oBAAoB,GAAGF,OAAO,EAAEE,oBAAoB,IAAI,KAAK;EAEnE,IAAIC,UAAU,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC;EAExD,IAAIC,cAAwB;EAC5B,IAAIC,aAAuB;EAE3B,IAAIH,oBAAoB,EAAE;IACxB;AACJ;AACA;AACA;AACA;IACIE,cAAc,GAAG,CAAC,SAAS,EAAE,QAAQ,EAAE,cAAc,CAAC;IACtDC,aAAa,GAAG,CAAC,SAAS,CAAC;EAC7B,CAAC,MAAM;IACLD,cAAc,GAAG,EAAE;IACnBC,aAAa,GAAG,EAAE;IAClBF,UAAU,GAAGA,UAAU,CAACG,OAAO,CAAEC,GAAG,IAAK;MACvC,MAAMC,WAAW,GAAG,IAAIT,QAAQ,GAAGQ,GAAG,EAAE;MACxC,MAAME,SAAS,GAAG,UAAUF,GAAG,EAAE;MAEjC,IAAIN,oBAAoB,EAAE;QACxB,OAAO,CAACO,WAAW,EAAEC,SAAS,EAAEF,GAAG,CAAC;MACtC,CAAC,MAAM;QACL,OAAO,CAACC,WAAW,EAAED,GAAG,CAAC;MAC3B;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,OAAO;IACL;AACJ;AACA;IACIG,UAAU,EAAE,CAAC,cAAc,EAAE,SAAS,EAAE,MAAM,CAAC;IAC/C;AACJ;AACA;IACIC,WAAW,EAAE,CAAC,cAAc,EAAE,SAAS,EAAE,MAAM,CAAC;IAChD;AACJ;AACA;IACIP,cAAc,EAAEA,cAAc;IAC9B;AACJ;AACA;IACIC,aAAa,EAAEA,aAAa;IAC5B;AACJ;AACA;IACIF,UAAU,EAAEA;EACd,CAAC;AACH","ignoreList":[]}
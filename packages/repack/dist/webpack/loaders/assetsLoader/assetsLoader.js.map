{"version":3,"file":"assetsLoader.js","names":["_path","_interopRequireDefault","require","_AssetResolver","_options","_extractAssets","_inlineAssets","_convertToRemoteAssets","_utils","e","__esModule","default","raw","exports","testXml","testMP4","testImages","testFonts","repackAssetsLoader","cacheable","callback","async","logger","getLogger","rootContext","debug","resourcePath","options","getOptions","pathSeparatorRegexp","RegExp","path","sep","resourceAbsoluteDirname","dirname","resourceDirname","relative","replace","resourceExtensionType","extname","suffixPattern","platform","resourceFilename","basename","resourceNormalizedFilename","length","toLowerCase","assetsDirname","remoteAssetsDirname","files","getFilesInDirectory","fs","scales","AssetResolver","collectScales","scalableAssetExtensions","name","type","scaleKeys","Object","keys","sort","a","b","getScaleNumber","scaleKey","filenameWithScale","join","addDependency","remoteAssetPathOption","remote","enabled","assetPath","remoteAssetResource","filename","assets","Promise","all","map","content","readFile","destination","devServerEnabled","test","indexOf","Error","scale","asset","inline","inlineAssets","emitFile","convertToRemoteAssets","remotePublicPath","publicPath","extractAssets","error"],"sources":["../../../../src/webpack/loaders/assetsLoader/assetsLoader.ts"],"sourcesContent":["import path from 'path';\nimport { LoaderContext } from 'webpack';\nimport { AssetResolver } from '../../plugins/AssetsResolverPlugin/AssetResolver';\nimport { getOptions, Options } from './options';\nimport { extractAssets } from './extractAssets';\nimport { inlineAssets } from './inlineAssets';\nimport { convertToRemoteAssets } from './convertToRemoteAssets';\nimport { getFilesInDirectory, getScaleNumber, readFile } from './utils';\nimport type { Asset } from './types';\n\nexport const raw = true;\n\nconst testXml = /\\.(xml)$/;\nconst testMP4 = /\\.(mp4)$/;\nconst testImages = /\\.(png|jpg|gif|webp)$/;\nconst testFonts = /\\.(ttf|otf|ttc)$/;\n\nexport default async function repackAssetsLoader(this: LoaderContext<Options>) {\n  this.cacheable();\n\n  const callback = this.async();\n  const logger = this.getLogger('repackAssetsLoader');\n  const rootContext = this.rootContext;\n\n  logger.debug(`Processing asset ${this.resourcePath}`);\n\n  try {\n    const options = getOptions(this);\n    const pathSeparatorRegexp = new RegExp(`\\\\${path.sep}`, 'g');\n    const resourcePath = this.resourcePath;\n    const resourceAbsoluteDirname = path.dirname(resourcePath);\n    // Relative path to rootContext without any ../ due to https://github.com/callstack/haul/issues/474\n    // Assets from from outside of rootContext, should still be placed inside bundle output directory.\n    // Example:\n    //   resourcePath    = <abs>/monorepo/node_modules/my-module/image.png\n    //   dirname         = <abs>/monorepo/node_modules/my-module\n    //   rootContext     = <abs>/monorepo/packages/my-app/\n    //   resourceDirname = ../../node_modules/my-module (original)\n    // So when we calculate destination for the asset for iOS (assetsDirname + resourceDirname + filename),\n    // it will end up outside of `assets` directory, so we have to make sure it's:\n    //   resourceDirname = node_modules/my-module (tweaked)\n    const resourceDirname = path\n      .relative(rootContext, resourceAbsoluteDirname)\n      .replace(new RegExp(`^[\\\\.\\\\${path.sep}]+`), '');\n    const resourceExtensionType = path.extname(resourcePath).replace(/^\\./, '');\n    const suffixPattern = `(@\\\\d+(\\\\.\\\\d+)?x)?(\\\\.(${options.platform}|native))?\\\\.${resourceExtensionType}$`;\n    const resourceFilename = path\n      .basename(resourcePath)\n      .replace(new RegExp(suffixPattern), '');\n    // Name with embedded resourceDirname eg `node_modules_reactnative_libraries_newappscreen_components_logo.png`\n    const resourceNormalizedFilename = `${(resourceDirname.length === 0\n      ? resourceFilename\n      : `${resourceDirname.replace(\n          pathSeparatorRegexp,\n          '_'\n        )}_${resourceFilename}`\n    )\n      .toLowerCase()\n      .replace(/[^a-z0-9_]/g, '')}.${resourceExtensionType}`;\n\n    const assetsDirname = 'assets';\n    const remoteAssetsDirname = 'remote-assets';\n\n    const files = await getFilesInDirectory(resourceAbsoluteDirname, this.fs);\n    const scales = AssetResolver.collectScales(\n      options.scalableAssetExtensions,\n      files,\n      {\n        name: resourceFilename,\n        type: resourceExtensionType,\n        platform: options.platform,\n      }\n    );\n\n    const scaleKeys = Object.keys(scales).sort(\n      (a, b) => getScaleNumber(a) - getScaleNumber(b)\n    );\n\n    for (const scaleKey of scaleKeys) {\n      const filenameWithScale = path.join(\n        resourceAbsoluteDirname,\n        scales[scaleKey].name\n      );\n      this.addDependency(filenameWithScale);\n    }\n\n    const remoteAssetPathOption =\n      options.remote?.enabled && options.remote?.assetPath\n        ? options.remote?.assetPath({\n            resourcePath,\n            resourceFilename,\n            resourceDirname,\n            resourceExtensionType,\n          })\n        : null;\n\n    const remoteAssetResource = remoteAssetPathOption\n      ? {\n          filename: path.basename(\n            remoteAssetPathOption,\n            `.${resourceExtensionType}`\n          ),\n          path: path.dirname(remoteAssetPathOption),\n        }\n      : null;\n\n    const assets = await Promise.all<Asset>(\n      scaleKeys.map(async (scaleKey) => {\n        const filenameWithScale = path.join(\n          resourceAbsoluteDirname,\n          scales[scaleKey].name\n        );\n\n        const content = await readFile(filenameWithScale, this.fs);\n\n        let destination;\n\n        if (\n          !options.devServerEnabled &&\n          !options.remote?.enabled &&\n          options.platform === 'android'\n        ) {\n          // found font family\n          if (\n            testXml.test(resourceNormalizedFilename) &&\n            content?.indexOf('font-family') !== -1\n          ) {\n            destination = 'font';\n          } else if (testFonts.test(resourceNormalizedFilename)) {\n            // font extensions\n            destination = 'font';\n          } else if (testMP4.test(resourceNormalizedFilename)) {\n            // video files extensions\n            destination = 'raw';\n          } else if (\n            testImages.test(resourceNormalizedFilename) ||\n            testXml.test(resourceNormalizedFilename)\n          ) {\n            // images extensions\n            switch (scaleKey) {\n              case '@0.75x':\n                destination = 'drawable-ldpi';\n                break;\n              case '@1x':\n                destination = 'drawable-mdpi';\n                break;\n              case '@1.5x':\n                destination = 'drawable-hdpi';\n                break;\n              case '@2x':\n                destination = 'drawable-xhdpi';\n                break;\n              case '@3x':\n                destination = 'drawable-xxhdpi';\n                break;\n              case '@4x':\n                destination = 'drawable-xxxhdpi';\n                break;\n              default:\n                throw new Error(\n                  `Unknown scale ${scaleKey} for ${filenameWithScale}`\n                );\n            }\n          } else {\n            // everything else is going to RAW\n            destination = 'raw';\n          }\n\n          destination = path.join(destination, resourceNormalizedFilename);\n        } else {\n          const name = `${remoteAssetResource?.filename ?? resourceFilename}${\n            scaleKey === '@1x' ? '' : scaleKey\n          }.${resourceExtensionType}`;\n\n          if (options.remote?.enabled) {\n            destination = path.join(\n              remoteAssetsDirname,\n              assetsDirname,\n              remoteAssetResource?.path ?? resourceDirname,\n              name\n            );\n          } else {\n            destination = path.join(assetsDirname, resourceDirname, name);\n          }\n        }\n\n        return {\n          filename: destination,\n          content,\n          scaleKey,\n          scale: getScaleNumber(scaleKey),\n        };\n      })\n    );\n\n    logger.debug(`Resolved request ${this.resourcePath}`, {\n      platform: options.platform,\n      rootContext,\n      resourceNormalizedFilename,\n      resourceFilename,\n      resourceDirname,\n      resourceAbsoluteDirname,\n      resourceExtensionType,\n      scales,\n      assets: assets.map((asset) => ({\n        ...asset,\n        content: `size=${asset.content?.length} type=${typeof asset.content}`,\n      })),\n    });\n\n    if (options.inline) {\n      logger.debug(`Inlining assets for request ${resourcePath}`);\n      callback?.(\n        null,\n        inlineAssets({ assets, resourcePath, resourceFilename, suffixPattern })\n      );\n    } else {\n      for (const asset of assets) {\n        const { filename, content } = asset;\n        logger.debug(`Emitting asset ${filename} for request ${resourcePath}`);\n\n        // Assets are emitted relatively to `output.path`.\n        this.emitFile(filename, content ?? '');\n      }\n\n      if (options.remote?.enabled) {\n        callback?.(\n          null,\n          convertToRemoteAssets({\n            assets,\n            assetsDirname,\n            remotePublicPath: options.remote.publicPath,\n            resourceDirname: remoteAssetResource?.path ?? resourceDirname,\n            resourceExtensionType,\n            resourceFilename: remoteAssetResource?.filename ?? resourceFilename,\n            resourcePath,\n            suffixPattern,\n            pathSeparatorRegexp,\n          })\n        );\n      } else {\n        callback?.(\n          null,\n          await extractAssets(\n            {\n              resourcePath,\n              resourceDirname,\n              resourceFilename,\n              resourceExtensionType,\n              assets,\n              suffixPattern,\n              assetsDirname,\n              pathSeparatorRegexp,\n              publicPath: options.publicPath,\n              devServerEnabled: options.devServerEnabled,\n            },\n            logger\n          )\n        );\n      }\n    }\n  } catch (error) {\n    callback?.(error as Error);\n  }\n}\n"],"mappings":"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","ignoreList":[]}